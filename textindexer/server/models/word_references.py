# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from textindexer.server.models.base_model_ import Model
from textindexer.server import util


class WordReferences(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document=None, paragraph=None, start=None, end=None, sentence=None, word=None):  # noqa: E501
        """WordReferences - a model defined in OpenAPI

        :param document: The document of this WordReferences.  # noqa: E501
        :type document: str
        :param paragraph: The paragraph of this WordReferences.  # noqa: E501
        :type paragraph: int
        :param start: The start of this WordReferences.  # noqa: E501
        :type start: int
        :param end: The end of this WordReferences.  # noqa: E501
        :type end: int
        :param sentence: The sentence of this WordReferences.  # noqa: E501
        :type sentence: int
        :param word: The word of this WordReferences.  # noqa: E501
        :type word: int
        """
        self.openapi_types = {
            'document': str,
            'paragraph': int,
            'start': int,
            'end': int,
            'sentence': int,
            'word': int
        }

        self.attribute_map = {
            'document': 'document',
            'paragraph': 'paragraph',
            'start': 'start',
            'end': 'end',
            'sentence': 'sentence',
            'word': 'word'
        }

        self._document = document
        self._paragraph = paragraph
        self._start = start
        self._end = end
        self._sentence = sentence
        self._word = word

    @classmethod
    def from_dict(cls, dikt) -> 'WordReferences':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Word_references of this WordReferences.  # noqa: E501
        :rtype: WordReferences
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document(self):
        """Gets the document of this WordReferences.


        :return: The document of this WordReferences.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this WordReferences.


        :param document: The document of this WordReferences.
        :type document: str
        """

        self._document = document

    @property
    def paragraph(self):
        """Gets the paragraph of this WordReferences.


        :return: The paragraph of this WordReferences.
        :rtype: int
        """
        return self._paragraph

    @paragraph.setter
    def paragraph(self, paragraph):
        """Sets the paragraph of this WordReferences.


        :param paragraph: The paragraph of this WordReferences.
        :type paragraph: int
        """

        self._paragraph = paragraph

    @property
    def start(self):
        """Gets the start of this WordReferences.


        :return: The start of this WordReferences.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this WordReferences.


        :param start: The start of this WordReferences.
        :type start: int
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this WordReferences.


        :return: The end of this WordReferences.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this WordReferences.


        :param end: The end of this WordReferences.
        :type end: int
        """

        self._end = end

    @property
    def sentence(self):
        """Gets the sentence of this WordReferences.


        :return: The sentence of this WordReferences.
        :rtype: int
        """
        return self._sentence

    @sentence.setter
    def sentence(self, sentence):
        """Sets the sentence of this WordReferences.


        :param sentence: The sentence of this WordReferences.
        :type sentence: int
        """

        self._sentence = sentence

    @property
    def word(self):
        """Gets the word of this WordReferences.


        :return: The word of this WordReferences.
        :rtype: int
        """
        return self._word

    @word.setter
    def word(self, word):
        """Sets the word of this WordReferences.


        :param word: The word of this WordReferences.
        :type word: int
        """

        self._word = word
