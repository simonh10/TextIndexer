# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from textindexer.server.models.base_model_ import Model
from textindexer.server.models.document_record import DocumentRecord
from textindexer.server import util

from textindexer.server.models.document_record import DocumentRecord  # noqa: E501

class Documents(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count=None, documents=None):  # noqa: E501
        """Documents - a model defined in OpenAPI

        :param count: The count of this Documents.  # noqa: E501
        :type count: int
        :param documents: The documents of this Documents.  # noqa: E501
        :type documents: DocumentRecord
        """
        self.openapi_types = {
            'count': int,
            'documents': DocumentRecord
        }

        self.attribute_map = {
            'count': 'count',
            'documents': 'documents'
        }

        self._count = count
        self._documents = documents

    @classmethod
    def from_dict(cls, dikt) -> 'Documents':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Documents of this Documents.  # noqa: E501
        :rtype: Documents
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Documents.


        :return: The count of this Documents.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Documents.


        :param count: The count of this Documents.
        :type count: int
        """

        self._count = count

    @property
    def documents(self):
        """Gets the documents of this Documents.


        :return: The documents of this Documents.
        :rtype: DocumentRecord
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this Documents.


        :param documents: The documents of this Documents.
        :type documents: DocumentRecord
        """

        self._documents = documents
