# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from textindexer.server.models.base_model_ import Model
from textindexer.server.models.word_references import WordReferences
from textindexer.server import util

from textindexer.server.models.word_references import WordReferences  # noqa: E501

class Word(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, word=None, encoding=None, language=None, references=None, reference_count=None):  # noqa: E501
        """Word - a model defined in OpenAPI

        :param id: The id of this Word.  # noqa: E501
        :type id: str
        :param word: The word of this Word.  # noqa: E501
        :type word: str
        :param encoding: The encoding of this Word.  # noqa: E501
        :type encoding: str
        :param language: The language of this Word.  # noqa: E501
        :type language: str
        :param references: The references of this Word.  # noqa: E501
        :type references: List[WordReferences]
        :param reference_count: The reference_count of this Word.  # noqa: E501
        :type reference_count: int
        """
        self.openapi_types = {
            'id': str,
            'word': str,
            'encoding': str,
            'language': str,
            'references': List[WordReferences],
            'reference_count': int
        }

        self.attribute_map = {
            'id': 'id',
            'word': 'word',
            'encoding': 'encoding',
            'language': 'language',
            'references': 'references',
            'reference_count': 'reference_count'
        }

        self._id = id
        self._word = word
        self._encoding = encoding
        self._language = language
        self._references = references
        self._reference_count = reference_count

    @classmethod
    def from_dict(cls, dikt) -> 'Word':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Word of this Word.  # noqa: E501
        :rtype: Word
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Word.


        :return: The id of this Word.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Word.


        :param id: The id of this Word.
        :type id: str
        """

        self._id = id

    @property
    def word(self):
        """Gets the word of this Word.


        :return: The word of this Word.
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word):
        """Sets the word of this Word.


        :param word: The word of this Word.
        :type word: str
        """

        self._word = word

    @property
    def encoding(self):
        """Gets the encoding of this Word.


        :return: The encoding of this Word.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this Word.


        :param encoding: The encoding of this Word.
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def language(self):
        """Gets the language of this Word.


        :return: The language of this Word.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Word.


        :param language: The language of this Word.
        :type language: str
        """

        self._language = language

    @property
    def references(self):
        """Gets the references of this Word.


        :return: The references of this Word.
        :rtype: List[WordReferences]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Word.


        :param references: The references of this Word.
        :type references: List[WordReferences]
        """

        self._references = references

    @property
    def reference_count(self):
        """Gets the reference_count of this Word.


        :return: The reference_count of this Word.
        :rtype: int
        """
        return self._reference_count

    @reference_count.setter
    def reference_count(self, reference_count):
        """Sets the reference_count of this Word.


        :param reference_count: The reference_count of this Word.
        :type reference_count: int
        """

        self._reference_count = reference_count
