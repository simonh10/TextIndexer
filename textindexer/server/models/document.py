# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from textindexer.server.models.base_model_ import Model
from textindexer.server.models.document_paragraphs import DocumentParagraphs
from textindexer.server import util

from textindexer.server.models.document_paragraphs import DocumentParagraphs  # noqa: E501

class Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, paragraphs=None):  # noqa: E501
        """Document - a model defined in OpenAPI

        :param id: The id of this Document.  # noqa: E501
        :type id: str
        :param paragraphs: The paragraphs of this Document.  # noqa: E501
        :type paragraphs: List[DocumentParagraphs]
        """
        self.openapi_types = {
            'id': str,
            'paragraphs': List[DocumentParagraphs]
        }

        self.attribute_map = {
            'id': 'id',
            'paragraphs': 'paragraphs'
        }

        self._id = id
        self._paragraphs = paragraphs

    @classmethod
    def from_dict(cls, dikt) -> 'Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Document of this Document.  # noqa: E501
        :rtype: Document
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Document.


        :return: The id of this Document.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.


        :param id: The id of this Document.
        :type id: str
        """

        self._id = id

    @property
    def paragraphs(self):
        """Gets the paragraphs of this Document.


        :return: The paragraphs of this Document.
        :rtype: List[DocumentParagraphs]
        """
        return self._paragraphs

    @paragraphs.setter
    def paragraphs(self, paragraphs):
        """Sets the paragraphs of this Document.


        :param paragraphs: The paragraphs of this Document.
        :type paragraphs: List[DocumentParagraphs]
        """

        self._paragraphs = paragraphs
