# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from textindexer.server.models.base_model_ import Model
from textindexer.server import util


class DocumentSentences(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index=None, text=None, tokens=None):  # noqa: E501
        """DocumentSentences - a model defined in OpenAPI

        :param index: The index of this DocumentSentences.  # noqa: E501
        :type index: str
        :param text: The text of this DocumentSentences.  # noqa: E501
        :type text: str
        :param tokens: The tokens of this DocumentSentences.  # noqa: E501
        :type tokens: List[str]
        """
        self.openapi_types = {
            'index': str,
            'text': str,
            'tokens': List[str]
        }

        self.attribute_map = {
            'index': 'index',
            'text': 'text',
            'tokens': 'tokens'
        }

        self._index = index
        self._text = text
        self._tokens = tokens

    @classmethod
    def from_dict(cls, dikt) -> 'DocumentSentences':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Document_sentences of this DocumentSentences.  # noqa: E501
        :rtype: DocumentSentences
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self):
        """Gets the index of this DocumentSentences.


        :return: The index of this DocumentSentences.
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DocumentSentences.


        :param index: The index of this DocumentSentences.
        :type index: str
        """

        self._index = index

    @property
    def text(self):
        """Gets the text of this DocumentSentences.


        :return: The text of this DocumentSentences.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this DocumentSentences.


        :param text: The text of this DocumentSentences.
        :type text: str
        """

        self._text = text

    @property
    def tokens(self):
        """Gets the tokens of this DocumentSentences.


        :return: The tokens of this DocumentSentences.
        :rtype: List[str]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this DocumentSentences.


        :param tokens: The tokens of this DocumentSentences.
        :type tokens: List[str]
        """

        self._tokens = tokens
